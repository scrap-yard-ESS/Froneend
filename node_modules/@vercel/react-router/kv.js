import { createSessionStorage, } from 'react-router';
export function createKvSessionStorage({ kv, cookie, prefix = 'session', }) {
    async function setData(id, value, expires) {
        if (expires) {
            await kv.set(id, value, { pxat: expires.getTime() });
        }
        else {
            await kv.set(id, value);
        }
    }
    const createData = async (data, expires) => {
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const id = `${prefix}:${crypto.randomUUID()}`;
            // `exists` returns the number of keys that match the
            // given pattern, so if it's 0 then the key doesn't exist.
            if ((await kv.exists(id)) === 0) {
                const str = JSON.stringify(data);
                await setData(id, str, expires);
                return id;
            }
        }
    };
    const readData = async (id) => {
        return (await kv.get(id)) ?? null;
    };
    const updateData = async (id, data, expires) => {
        const str = JSON.stringify(data);
        if (str === '{}') {
            // If the data is empty then delete the session key
            return deleteData(id);
        }
        await setData(id, str, expires);
    };
    const deleteData = async (id) => {
        await kv.del(id);
    };
    return createSessionStorage({
        cookie,
        createData,
        readData,
        updateData,
        deleteData,
    });
}
